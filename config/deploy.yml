# Name of your application. Used to uniquely configure containers.
service: quiz

# Name of the container image.
image: alexohre/quiz

# Deploy to these servers.
servers:
  web:
    hosts:
      - 157.245.34.192
  #
  job:
    hosts:
      - 157.245.34.192
    # Or something like bin/job
    cmd: bundle exec sidekiq

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: alexohre

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD
# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: 157.245.34.192
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
# Use a different ssh user than root
# ssh:
#   user: app

builder:
  remote:
    arch: amd64
  buildx:
    builder: cloud-alexohre-cloud-build
    args:
      - RUBY_VERSION=3.2.2
  cmd: docker buildx build --builder cloud-alexohre-cloud-build .
# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:15
    host: 157.245.34.192
    port: 5432
    env:
      clear:
        POSTGRES_USER: quiz
        POSTGRES_DB: quiz_production
      secret:
        - POSTGRES_PASSWORD
    files:
      # - config/postgres/production.cnf:/etc/postgresql/my.conf
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql # This should be formatted as an array
    directories:
      - data:/var/lib/postgresql/data # Volume for PostgreSQL data
      #
  redis:
    image: redis:7.0
    host: 157.245.34.192
    port: 6379
    cmd: "redis-server"
    # volumes:
    #   - /var/lib/redis:/data
    directories:
      - data:/data # Volume for Redis data

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  port: 3000
  interval: 10s
# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
